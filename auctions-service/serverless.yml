service:
  name: auctions-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters ##used for assigning values like Region and accountId,taking advantage of CFN pseudo parameters
  - serverless-iam-roles-per-function ###https://www.serverless.com/plugins/serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region:  us-east-2 ##  Region
  environment:  ##Defining variable to pass it to the JS File.
    AUCTION_TABLE_NAME: ${self:custom.AuctionTableDetails.name}
    AUTH_SIGNING_CERTIFICATE: ${file(Auth-Signing-Certificate.pem)}
  iamRoleStatements:
   - ${file(iam/AuctionTableIAM.yml):AuctionTableIAM}
resources:
    Resources:
     AuctionsTable: ${file(resources/AuctionTable.yml):AuctionTable}
     GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
     AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
     SQSMailQueue: ${file(resources/AuctionTable.yml):SQSMailQueue}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}

  getAuctionById: 
    handler: src/handlers/getAuctionById.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: ${self:custom.authorizer}

  placingBid: 
    handler: src/handlers/placingBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: ${self:custom.authorizer}
  processingAuctions: 
    handler: src/handlers/processingAuctions.handler
    #events:
     # - schedule: rate(2 minutes)
  LambdaAuthorizerFunction:
    handler: src/handlers/LambdaAuthorizerFunction.handler
    cors: true
  SendingEmail:
    handler: src/handlers/SendingEmail.handler
    iamRoleStatements:
      - ${file(iam/AuctionTableIAM.yml):LambdaSESIAM}
    events:
      - sqs:
          arn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:SQSMailQueue-${self:provider.stage}
          batchSize: 1 ###Please define this as your production, max batch size is 10


custom:
  AuctionTableDetails:
   name: !Ref AuctionsTable ###Getting the name of table
   arn: !GetAtt AuctionsTable.Arn ###Getting the arn
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auctions-service-${self:provider.stage}-LambdaAuthorizerFunction

  SQSMailQueue:
   name: SQSMailQueue-${self:provider.stage}
   arn: !GetAtt SQSMailQueue

